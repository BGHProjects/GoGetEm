EDUCBAEDUCBA
Menu
React Native Grid
By Priya PedamkarPriya Pedamkar

Home » Software Development » Software Development Tutorials » React Native Tutorial » React Native Grid
React Native Grid
Introduction to React Native Grid
A grid layout can be defined as a layout in which components are arranged in form of rows and columns thus providing an easy way of allocating components on user interface without use of positioning and floating values, in order to use react native grid layout we need to include dependency of react native grid.

Syntax:

Now we will see the basic syntax. Here is the code syntax:

// import react component
import React, { Component } from 'react';
// import stylesheet and view
import { StyleSheet, View } from 'react-native';
// import react grid library
import Grid from 'react-native-grid-component';
// create class
class <ClassName> extends Component {
renderItem = (data, i) => (
// render style on component
);
renderPlaceholderItem =
// write logic to render placeholder item
/>;
render() {
return (
<Grid
style={styles.list}
renderItem={this.renderItem} // call method to render style to item
renderPlaceholder={this.renderPlaceholderItem } // call method to render placeholder item
data={<Data in form of array to be rendered into a grid>}
numColumns={<set number of columns in grid>}
/>
);
}
}

The above syntax shows how to use grid in react native. It first requires importing grid into our code after we add dependency of react grid into our project. In the render method we have used Grid tag and specified different properties of grid. Here <ClassName> represents name of react class, <Data> represents data in form of array which will be populated into grid in form of rows and columns. Number of columns required in the grid can be set using numColumns property. There are some other properties used in the above syntax and explanation of them is provided later in the article.

How Grid Works in React Native?
As you can see from the above syntax, in order to use react native grid we need to add react native grid dependency into our react native project. Dependency can be added by running the below command:

npm install react-native-grid-component

After the above command runs successfully, we can import dependency into our project and use it as per our requirement. The following parameters are available in react native grid layout:

 Popular Course in this category
React JS Redux Training (1 Course, 5 Projects)
1 Online Courses | 5 Hands-on Projects | 18+ Hours | Verifiable Certificate of Completion | Lifetime Access
4.5 (6,460 ratings)Course Price
$79 $399
View Course
Related Courses
Property Name	Is Required/Optional	PropertyType
data	Required	Array
renderItem	Required	function(data: anydata, n: number) =>ReactElement
renderPlaceHolder	Optional	Function(n: number) =>ReactElement
numColumns	Optional	Number
keyExtractor	Optional	Function(item: object , n: number) => string
sections	Optional	Boolean
In the above table we have listed different properties available in grid tag in react native. Here is a brief description of each of the above properties:

data: This is an array of data that would be rendered on the grid in form of rows and columns.
renderItem: Function takes one input at a time from data and transforms it into formatted component to render on User interface.
renderPlaceHolder: This is an optional component whose type is a function taking a number as input and perform desired logic to return react element.
keyExtractor: An item is always associated with a key, this is used to extract key corresponding to react component.
numColumns: This is an integer value that represents the number of columns required in a react grid.
Sections: This is a Boolean property which is set when we list of data needs to be broken down into logical units of data.
Example of React Native Grid
Now we will see react native code example showing use of react native grid:

import React, { Component } from 'react';
import { StyleSheet, View } from 'react-native';
import Grid from 'react-native-grid-component';
const COLOR_COUNT = 10;
export default class App extends Component {
constructor(props) {
super(props);
this.state = {
data: addColorOnGrid(COLOR_COUNT),
refreshing: false,
};
}
dorenderItem = data => (
<View style={[{ backgroundColor: data }, styles.item]} />
);
dorenderPlaceholder = () => <View style={styles.item} />;
render() {
return (
<Grid
style={styles.list}
renderItem={this.dorenderItem}
renderPlaceholder={this.dorenderPlaceholder}
data={this.state.data}
// define number of columns on grid
numColumns={3}
keyExtractor={(item, n) => n.toString()}
refreshing={this.state.refreshing}
// do actions on refresh
onRefresh={() => {
this.setState({
data: addColorOnGrid(COLOR_COUNT),
refreshing: false,
});
}}
/>
);
}
}
const styles = StyleSheet.create({
item: {
flex: 2,
height: 120,
margin: 1.5,
},
list: {
flex: 2,
},
});
// Helper functions
// thanks materialuicolors.co
const colors_arr = [
'#2196F3',
'#03A9F4',
'#00BCD4',
'#009688',
'#4CAF50',
'#8BC34A',
'#CDDC39',
'#FFEB3B',
'#FFC107',
'#FF9800',
'#FF5722'
];
function addColorOnGrid(length) {
return Array.from(Array(length)).map(
() => colors_arr[Math.floor(Math.random() * colors_arr.length)] );
}

Output:

React Native Grid-1.1
The above example shows how to use a grid view in react native. After executing above code we will see the below output on mobile screen. The grid shown above contains three columns as defined in above code.

Recommended Articles
This is a guide to React Native Grid. Here we also discuss the Introduction and how does grid works in react native? along with different examples and code its implementation. You may also have a look at the following articles to learn more –

React Native Drawer Navigation
React Native Libraries
React Native Image
React Native AsyncStorage
REACT JS REDUX TRAINING (1 COURSE, 4 PROJECTS)

 1 Online Courses

 5 Hands-on Projects

 18+ Hours

 Verifiable Certificate of Completion

 Lifetime Access

Learn More

0SHARES
Share
Tweet
Share
Primary Sidebar

React Native Tutorial
 Basic
What Is React Native?
React Versions
React Constructor
React Native Architecture
React Native Libraries
React Components Libraries
React Native Components
React Component Library
React Component Lifecycle
React Native Framework
React Higher Order Component
React Ternary Operator
React Native Charts
React Native Layout
React Native Grid
React Native Fetch
React Native Modal
React Native SVG
Button In React Native
React List Components
React Native Element
React Native FlatList
React Native SectionList
React Native Dropdown
React Native Menu
React Native State
React State Management
React Native Tabs
React Native Tab Bar
React Format
React-Native Switch
React Native Firebase
React Native Flexbox
React Native StatusBar
React Native ScrollView
React Native Horizontal Scroll
React Native ListView
React Native TextInput
React Native Table
React-Native Border Style
React Native Search Bar
React-Native StyleSheet
React Native Vector Icons
React Native Login Screen
React Native Splash Screen
React Native Image Picker
React Native Navigation
React Native Swift
React Controlled Input
React Fragment
React Native Color
React Native Useeffect
React Portals
React Map
React Refs
React ShouldComponentUpdate()
React ComponentDidMount()
React ComponentWillUpdate()
React ComponentWillMount()
React Native Orientation
React Native Box Shadow
React Native SafeAreaView
React Native Background Image
React Native Animation
React Native Form
React Props
React PropTypes
React Native Linear Gradient
React Native AsyncStorage
React Error Boundaries
React Native Progress Bar
React-Native Calendar
React Native Linking
React Native DatePicker
React Native Image
React Native Drawer
React Native Drawer Navigation
React Native Fonts
Styling In React Native
React Native Overlay
React Native OneSignal
React Native Template
React Native Router
React Router Transition
React Dispatcher
React Native Transform
React Native ZIndex
React Native Redux
React JSX
React Native Keyboardavoidingview
React Native Permissions
React Redux Connect
React Native Material
React Native Gesture Handler
React Native Theme
React Native Picker
React Native Slider
React Native Websocket
React Native Opacity
React Native Usestate
React Native Keep Awake
React Native Accessibility
React Native Justify Content
MobX React Native
React Native Authentication
React Native UUID
React Native Geolocation
React Native Debugger
React Native Carousel
React Native Local Storage
React Native TypeScript
React Bootstrap
ReactDOMServer
React Native SQLite
React Native Interview Questions
Footer
About Us
Blog
Who is EDUCBA?
Sign Up
Corporate Training
Certificate from Top Institutions
Contact Us
Verifiable Certificate
Reviews
Terms and Conditions
Privacy Policy
 
Apps
iPhone & iPad
Android
Resources
Free Courses
Java Tutorials
Python Tutorials
All Tutorials
Certification Courses
All Courses
Software Development Course - All in One Bundle
Become a Python Developer
Java Course
Become a Selenium Automation Tester
Become an IoT Developer
ASP.NET Course
VB.NET Course
PHP Course
© 2020 - EDUCBA. ALL RIGHTS RESERVED. THE CERTIFICATION NAMES ARE THE TRADEMARKS OF THEIR RESPECTIVE OWNERS.

This website or its third-party tools use cookies, which are necessary to its functioning and required to achieve the purposes illustrated in the cookie policy. By closing this banner, scrolling this page, clicking a link or continuing to browse otherwise, you agree to our Privacy Policy

OKquiz